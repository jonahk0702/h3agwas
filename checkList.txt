**9 June**
  - I am still struggling with the read string functions.
  - Questions: Are these two statements equal?
    partial_length = ord(struct.unpack("c", handle.read(1))[0])
    handle.read(total_length)
    As i use the same thing for both? 
  - I had an idea to restructure the the BeadArrayFiles so nothing is really imported and I now am able to see all intermediate values
  - Using this new method, I am able to see if previous things are right, as JT mentioned the Version. It is right, we use verion 4
  - Had a giant breakthrough
    [int] b = 29 & 0x80, means b = 0
    in pythonn - >  if(29 & 0x80 > 0) returns false
    in c ->         if(29 & 0x80 > 0) returns true.
    in c ->         if(b > 0) returns false. Thus, use this second version!
    
  - That -24 I was getting a while ago, I got it! Its an usigned int. But even when I declare unsigned, it is still signed. So i used twos compliment

**26 May**
  - I have finally got the C to work but not sure its correct
    We spoke about the while loop not running most of the time.
    Well that While loop actually reads in the first char of the Manifest_name and we move past it. Thus we miss it later
    By removing the while, it all works well.
  - The other error I could not solve was actually solved when Scott and JT were arguing about '0' vs '/0'. I did not have the end charactor and the array simply read data that was not allocated to it. BTWs '\0' works and '0' does not.
  - Finally, onwards and upwards!
  - Now I am just fighting with parse Int function. My theory is little bas big endian.

**12 May**
  - I started testing the C code against the Python code and I found my first error. Its in the beginning when reading in and my script seems to be reading in way too many bytes.  
  - Its my read_string function which just is not working. 
  - I am sure its just a bug and sure I can find it.

**05 May**
  - I have mainly been working on the python script. I want to be able to debug it and run seperate parts individually in order to test against my c code and possibly unit test them both.
   - I chose to get into this here as I am getting wierd results in C. It could be right, I just dont know. SO want to be able to see. 
  - But it seems to be working. I understand my BeadPoolManifest script is supposed to return and object.
    This one script does most of the work (and takes most of the time) for the entire python library.
  - From their I can either format the data for a final report (Which the Python script does) or go for a plink file (which is what I want to do)
  - I have coded a script that saved intermediate values in a sort of Debug-Object and will use it - can also be the point of the the Unit testing.
  - Note to self - Dont try print out intermediate values - they are really really really long...
  - Currently working on adding a new attribute about version name to debug it.
    
**28 April**
  - Getting into unit testing.
  Have installed Unity and been playing with their examples. 
  Need to implement my own examples. 
  - 
  - On the actaul BeadPoolManifest side, I am not finished yet. I have been writing functions indivudally and can test each one with a unit testing.
   - I have been getting surpsing results and so want to run it against the actual Python version. 
   - Wait, am I able to unit test and use the desired function as the answer instead of hardcoding it.

**14 April**
  - Finally got my GitHub to work! Spent way too long, but happy its done
    Going forward, it will be good to keep large BPM and EGT files seperately - this will avoid Github issues, sharing data issues and is how these scripts will be used.
  - I am having some issues with reading String
    This is a good excuse to clone Illumina's Python scripts and start testing each function against my own.
    I have done this.

**7 April**
  - I spent quite a bit of time struggling with the version. They expect a 1 and I just was not getting that.
    After trying many different ideas, ie chaging num bytes and num bytes of previous data, I think I got it
    For some reason, its only a 1 when read in as a char but passed to an int. 
  - This is a good lesson in general, in Python its often less explicit if x == '1' or x == 1. Watch the datatypes
- I am still struggling with Git. It just was not removing BPM. After some time I gave up as it was wasting time
- Getting a seg fault. Not exactly sure why
  

**31 March**
  - Going much better
  - Need help with Githup and unpacking.
  - Cannot oush to github because ofBPM
  - Issue on python code struct.unpack
    Interestingly, it looks like little endian comes up here.
    This is my biggest issue.
  - If I have already read some data from a file Ptr, can I pass that ptr to another function and carry on reading from where I left off?
  - I am able to use numbers such as 0x80 -> tested it
  - In terms of decode UTF 8, I get 'B' insead of '2'
    Worked on a radom test but not before or after? I was actyally ttesting 0x80 and correct Verision Byte was read
  - Figured out emacs commands. 

**24 March **
- Busy reading from GTCs
  I have been struggling with memory allocation. My anti-virus keeps deleting my build files.
- The the creating of objects and functions seem to be going well.
  Memory allocation is taking some getting used to. 
- I am combining two files from Illumina- The BeadPoolManifest file and the BeadArrayUtility files.
  The other files reference functions from these more for the most complex functions
- Can be a lot more efficient, and need to double check data type sizes.
- Unicodes are still pretty worrying.
  
  
** 17 March **
- Still want to read GTCs
- Here the issue is that all the way I have found use Python libraries. I need a c library to decode it...
- Idea 1: This seems very promosing. It is the base of that python library. I just need to recode it in C.
  https://github.com/Illumina/BeadArrayFiles
- Interesting link
  https://f1000research.com/articles/2-264/v1
    This is Illuminaio, that open source IDAT reader.
  https://github.com/HenrikBengtsson/illuminaio
    This seems to be more PLINk orientated
- I have been writing this module in C. All the support files look managable.



**10 March
- Want to read the GTCs. Options:
  https://github.com/Illumina/BeadArrayFiles/blob/develop/examples/gtc_final_report.py - On open Source tool that reads GTCs
  YES! This works!
  This is not quite the right file. Its in example and generate report.
  Got the function and class that does the reading! GenotypeClass(object)
 - There is a way to take the report.txt to .lgen? then to PED through a plink command? is that desireable? Or do i do it manually?
 - Here is another interesting idea:
 https://github.com/nicolazzie/SNPchimpRepo/blob/master/README.md
 There is a program that converts row format to Plink Files... Are we row? And is it okay I dont really understand how Plink works
 But this program takes in a final report and converts it to 
- Need to ask if this is a roundabout and ineffecient way of doing this or if its standard?
  This creates a PED and a MAP file... Is that all
- Interesting file: https://www.biostars.org/p/135156/


**03 March ***
GTC to Plink
- resolved permission errors
- Managed to create a GTC from IDats.
- To make sure, it asks for an Idat folder and not an Idat File. I assumed this meant take the two files with same names just Red and Grn endinds and put them in thier own folder and use that? Seemed to work. As long as there are pairs of folders, its all good. 
- Now that I have a GTC, I need to read it.
- Whenever I run a command, I just run it ie python read.py. I dont worry about scheduling jobs? Is that okay? Potentially. Scott did give another command.
- Is a GTC file binary. Will I be able to write code to read it, or is the pre built code I should use? No.




**22 Feb **
Converting GTC to PLINK files
- Do I need the iaap-cli to convert IDats to GTCs?
  - I am struggling to run this when I call iaap-cli i get: /opt/exp_soft/bioinf/bin/iaap-cli : permission denied
    And i tried referencing the bcftools but get "No such directory"
  - I have put module load bioinf at bottom of my .bashrc file
- In general once I have to GTCs, I am not exactly sure how to read them. 

- With the Plink generation: I have found a great resource: https://zzz.bwh.harvard.edu/plink/dist/plink-doc-1.05.pdf
  - I think I am figuring out how it works, but may ask more questions.
  
- Github: I havent uploaded everything, because I wasnt sure if I could upload the IDATs. Instead i just made a folder.
  This is the current files I would like to ask about.

Understanding the iDats
- Wondering if there is a mistake with idat_hash on line 119. It is never declared. 
  - It could be getIdatHash()?
  - My code runs without errors and returns PID and Fs. Not sure what they are.
 
